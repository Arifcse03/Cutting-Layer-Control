package model.entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 22 15:00:10 BDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnjCutlyrcntrlOffstandardLImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LineId {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getLineId();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        DetailId {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getDetailId();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setDetailId((Number)value);
            }
        }
        ,
        StitchingLine {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getStitchingLine();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setStitchingLine((String)value);
            }
        }
        ,
        TotalStandad {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getTotalStandad();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setTotalStandad((Number)value);
            }
        }
        ,
        Remarks {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getRemarks();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        Attribute1 {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getAttribute1();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttribute1((String)value);
            }
        }
        ,
        Attribute2 {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getAttribute2();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttribute2((String)value);
            }
        }
        ,
        Attribute3 {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getAttribute3();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttribute3((String)value);
            }
        }
        ,
        Attribute4 {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getAttribute4();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttribute4((String)value);
            }
        }
        ,
        Attribute5 {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getAttribute5();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttribute5((String)value);
            }
        }
        ,
        MnjMfgCutlyrcntrlH {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getMnjMfgCutlyrcntrlH();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setMnjMfgCutlyrcntrlH((MnjMfgCutlyrcntrlHImpl)value);
            }
        }
        ,
        MnjCutlyrcntrlOffstandardD {
            public Object get(MnjCutlyrcntrlOffstandardLImpl obj) {
                return obj.getMnjCutlyrcntrlOffstandardD();
            }

            public void put(MnjCutlyrcntrlOffstandardLImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MnjCutlyrcntrlOffstandardLImpl object);

        public abstract void put(MnjCutlyrcntrlOffstandardLImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int DETAILID = AttributesEnum.DetailId.index();
    public static final int STITCHINGLINE = AttributesEnum.StitchingLine.index();
    public static final int TOTALSTANDAD = AttributesEnum.TotalStandad.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int ATTRIBUTE1 = AttributesEnum.Attribute1.index();
    public static final int ATTRIBUTE2 = AttributesEnum.Attribute2.index();
    public static final int ATTRIBUTE3 = AttributesEnum.Attribute3.index();
    public static final int ATTRIBUTE4 = AttributesEnum.Attribute4.index();
    public static final int ATTRIBUTE5 = AttributesEnum.Attribute5.index();
    public static final int MNJMFGCUTLYRCNTRLH = AttributesEnum.MnjMfgCutlyrcntrlH.index();
    public static final int MNJCUTLYRCNTRLOFFSTANDARDD = AttributesEnum.MnjCutlyrcntrlOffstandardD.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnjCutlyrcntrlOffstandardLImpl() {
    }

    /**
     * Gets the attribute value for LineId, using the alias name LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number)getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineId.
     * @param value value to set the LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for DetailId, using the alias name DetailId.
     * @return the DetailId
     */
    public Number getDetailId() {
        return (Number)getAttributeInternal(DETAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DetailId.
     * @param value value to set the DetailId
     */
    public void setDetailId(Number value) {
        setAttributeInternal(DETAILID, value);
    }

    /**
     * Gets the attribute value for StitchingLine, using the alias name StitchingLine.
     * @return the StitchingLine
     */
    public String getStitchingLine() {
        return (String)getAttributeInternal(STITCHINGLINE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StitchingLine.
     * @param value value to set the StitchingLine
     */
    public void setStitchingLine(String value) {
        setAttributeInternal(STITCHINGLINE, value);
    }

    /**
     * Gets the attribute value for TotalStandad, using the alias name TotalStandad.
     * @return the TotalStandad
     */
    public Number getTotalStandad() {
        return (Number)getAttributeInternal(TOTALSTANDAD);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotalStandad.
     * @param value value to set the TotalStandad
     */
    public void setTotalStandad(Number value) {
        setAttributeInternal(TOTALSTANDAD, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String)getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for Attribute1, using the alias name Attribute1.
     * @return the Attribute1
     */
    public String getAttribute1() {
        return (String)getAttributeInternal(ATTRIBUTE1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute1.
     * @param value value to set the Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**
     * Gets the attribute value for Attribute2, using the alias name Attribute2.
     * @return the Attribute2
     */
    public String getAttribute2() {
        return (String)getAttributeInternal(ATTRIBUTE2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute2.
     * @param value value to set the Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**
     * Gets the attribute value for Attribute3, using the alias name Attribute3.
     * @return the Attribute3
     */
    public String getAttribute3() {
        return (String)getAttributeInternal(ATTRIBUTE3);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute3.
     * @param value value to set the Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**
     * Gets the attribute value for Attribute4, using the alias name Attribute4.
     * @return the Attribute4
     */
    public String getAttribute4() {
        return (String)getAttributeInternal(ATTRIBUTE4);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute4.
     * @param value value to set the Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**
     * Gets the attribute value for Attribute5, using the alias name Attribute5.
     * @return the Attribute5
     */
    public String getAttribute5() {
        return (String)getAttributeInternal(ATTRIBUTE5);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute5.
     * @param value value to set the Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MnjMfgCutlyrcntrlHImpl.
     */
    public MnjMfgCutlyrcntrlHImpl getMnjMfgCutlyrcntrlH() {
        return (MnjMfgCutlyrcntrlHImpl)getAttributeInternal(MNJMFGCUTLYRCNTRLH);
    }

    /**
     * Sets <code>value</code> as the associated entity MnjMfgCutlyrcntrlHImpl.
     */
    public void setMnjMfgCutlyrcntrlH(MnjMfgCutlyrcntrlHImpl value) {
        setAttributeInternal(MNJMFGCUTLYRCNTRLH, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnjCutlyrcntrlOffstandardD() {
        return (RowIterator)getAttributeInternal(MNJCUTLYRCNTRLOFFSTANDARDD);
    }

    /**
     * @param detailId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number detailId) {
        return new Key(new Object[]{detailId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entities.MnjCutlyrcntrlOffstandardL");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        oracle.jbo.server.SequenceImpl s =new oracle.jbo.server.SequenceImpl("MNJ_CUTLYRCNTRL_OFFSTANDARD_LS",getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        setDetailId(sVal);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
